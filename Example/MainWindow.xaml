<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApplication1"
        xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing" x:Class="TapTrack.Demo.MainWindow"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:gif="http://wpfanimatedgif.codeplex.com"
        mc:Ignorable="d"
        WindowStartupLocation="CenterScreen"
        Title="Tappy Demo 2.4" Height="650" Width="800" Foreground="{x:Null}" Background="{StaticResource LightBackground}">
    <Grid Background="{StaticResource LightBackground}">
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Name="settingsContainer" Height="0"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <WrapPanel Grid.Row="0" HorizontalAlignment="Left">
            <TextBlock Margin="10" FontSize="20" Foreground="White">TapTrack</TextBlock>
        </WrapPanel>
        <WrapPanel Grid.Row="0" HorizontalAlignment="Right" >
            <Button Margin="10" Height="15" Padding="0" Background="White" BorderBrush="{x:Null}" Style="{StaticResource StopButton}" Click="StopButton_Click"/>
            <Button Name="autoDetectButton" Margin="10" Height="25" Padding="0" Background="{x:Null}"
					BorderBrush="{x:Null}" Style="{StaticResource USBButton}" Click="AutoDetectButton_Click"/>
            <Button Margin="10" Height="25" Style="{StaticResource DisconnectButton}" Click="disconnectButton_Click"  Content="Disconnect"/>
            <Button Margin="10" Height="25" Padding="0" Background="{x:Null}" BorderBrush="{x:Null}" Style="{StaticResource SettingsButton}" Click="SettingsButton_Click"/>
        </WrapPanel>
        <Border Grid.Row="1" Background="{StaticResource LightBackground}">
            <StackPanel Orientation="Vertical">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Timeout"/>
                    <TextBlock Margin="5,0,0,0" VerticalAlignment="Center" >
                        <Hyperlink Foreground="White" ToolTip="Timeout is in secs. 0 = no timeout">
                            ?
                        </Hyperlink>
                    </TextBlock>
                    <xctk:IntegerUpDown Name="timeout" Margin="10,5,0,5" FormatString="N0" Value="0" Increment="1" Minimum="0" Maximum="255"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <CheckBox Name="lockCheckBox"  VerticalAlignment="Center" Margin="10,0,0,0" IsChecked="False"></CheckBox>
                    <Label Foreground="White" Content="Lock after writing"/>
                </StackPanel>
            </StackPanel>
        </Border>
        <Popup Name="statusPopup" Placement="Center" Grid.Row="2" Height="Auto" MinWidth="175" Width="Auto" PopupAnimation="Fade">
            <Border CornerRadius="1" BorderBrush="Gray" BorderThickness="2" Background="{StaticResource DarkBackground}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition Name="dismissButtonContainer" Height="0"/>
                    </Grid.RowDefinitions>

                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="0">
                        <StackPanel Margin="0,20,0,0" Orientation="Horizontal" HorizontalAlignment="Center" >
                            <Label Name="statusText" FontSize="15" VerticalAlignment="Center" Foreground="White"/>
                            <Image Name="statusImage" Height="30" gif:ImageBehavior.AnimatedSource="{x:Null}" />
                        </StackPanel>
                        <Label Name="statusMessage" Padding="10,0,10,10" FontSize="10" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White"/>
                    </StackPanel>

                    <Button Name="dismissButton" HorizontalAlignment="Center" Visibility="Hidden" Grid.Row="1" Style="{StaticResource RoundButton}" Click="DismissButton_Click">Dismiss</Button>
                </Grid>
            </Border>
        </Popup>
        <TabControl Padding="0" Grid.Row="2" ItemContainerStyle="{StaticResource SimpleTabItem}" BorderBrush="#FF15AAFF" Background="{x:Null}" BorderThickness="0,2,0,0" Foreground="{x:Null}">
            <TabControl.Resources>
                <Style TargetType="{x:Type Grid}">
                    <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                </Style>
                <Style TargetType="{x:Type TabPanel}">
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                </Style>
            </TabControl.Resources>
            <TabItem Header="Detect">
                <TabControl Padding="0" TabStripPlacement="Left" Background="{x:Null}" BorderThickness="0">
                    <TabControl.Resources>
                        <Style TargetType="{x:Type Grid}">
                            <Setter Property="Background" Value="White"/>
                        </Style>
                        <Style TargetType="{x:Type TabPanel}">
                            <Setter Property="VerticalAlignment" Value="Top"/>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Style="{StaticResource DetectNdefTab}">
                        <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <StackPanel Background="{StaticResource DarkBackground}" Orientation="Vertical">
                                <StackPanel Margin="10">
                                    <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                        Detect NDEF
                                    </TextBlock>
                                    <TextBlock Foreground="White" TextWrapping="Wrap">
                                        A special space-efficient format is called the NFC Data Exchange Format (NDEF) is commonly used to 
                                        store data on NFC tags in a manner that allows NFC readers to make sense of the tag contents. If a tag has been formatted 
                                        to store NDEF data in a standards-compliant fashion, this operation can be 
                                        to retrieve that information, as well as some information about the tag itself.
                                    </TextBlock>
                                </StackPanel>
                                <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Content"/>
                                <TextBox Name="ndefData" AcceptsReturn="True" Style="{StaticResource TextBox}"></TextBox>
                                <Button Name="readNdefButton" Margin="10" HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="ReadNdefButton_Click">Read</Button>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>
                    <TabItem Style="{StaticResource DetectTagTab}">
                        <StackPanel Background="{StaticResource DarkBackground}" Orientation="Vertical">
                            <StackPanel Margin="10">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Detect Tag
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    Most NFC tags are identified by a 4-, 7-, or 10-byte unique serial number (UID). The tag
                                    will also return additional information during the detection procedure that can be
                                    used to identify what type of tag it is. However, there are collisions between 
                                    certain types of tags, in which case the Tappy will report either a generic type
                                    or attempt to heuristically determine the tag technology, depending on configuration.
                                    If the Tappy reports that a tag is a 'generic' type, this means that the heuristics were
                                    unable to determine the specific tag technology to a sufficient level of confidence.
                                    Additionally, for security reasons, some advanced tags can be configured to report 
                                    a dynamic UID, in which case the UID detected will change with every scan.
                                    <LineBreak/><LineBreak/>
                                    If you need the exact manufacturer and model of the chip inside an NFC Forum Type 2 compliant tag go to the Utilities tab 
                                    then Configure Settings and enable Type 2 Tag Identification.
                                </TextBlock>
                            </StackPanel>
                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="UID"/>
                            <TextBox Name="uidTextBox" Style="{StaticResource TextBox}"></TextBox>
                            <Label Margin="10,0,0,0" Padding="0,0,0,10" Foreground="White" Content="Type"/>
                            <TextBox Name="typeTextBox"  Style="{StaticResource TextBox}"></TextBox>
                            <Button Name="readUIDButton" Margin="10" HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="ReadUIDButton_Click">Read</Button>
                        </StackPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource DetectTypeBTab}">
                        <StackPanel Background="{StaticResource DarkBackground}" Orientation="Vertical">
                            <StackPanel Margin="10">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Detect Type 4B
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    Certain ISO14443-4 (Type 4) NFC tags make use of an alternative type of radio 
                                    modulation referred to as Type B instead of the more common Type A.
                                    <LineBreak/>
                                    <LineBreak/>
                                    The detection process and resulting information for Type 4B tags is distinctly
                                    different from that for Type 4A tags, so the Tappy must be explicitly told to 
                                    that it is scanning for a Type 4B tag. This tool may be used to detect these 
                                    unusual tags; if you are instead scanning for Type 4A, please use the standard 
                                    scanning tool.
                                </TextBlock>
                            </StackPanel>
                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="ATQB"/>
                            <TextBox Name="atqbTextBox"  Style="{StaticResource TextBox}"></TextBox>
                            <Label Margin="10,0,0,0" Padding="0,0,0,10" Foreground="White" Content="ATTRIB"/>
                            <TextBox Name="attribTextBox" Style="{StaticResource TextBox}"></TextBox>
                            <WrapPanel Margin="10" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Style="{StaticResource RoundButton}" Click="ReadType4B">Read</Button>
                            </WrapPanel>
                        </StackPanel>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Write">
                <TabControl Padding="0" TabStripPlacement="Left" Background="{x:Null}" BorderThickness="0">
                    <TabControl.Resources>
                        <Style TargetType="{x:Type Grid}">
                            <Setter Property="Background" Value="White"/>
                        </Style>
                        <Style TargetType="{x:Type TabPanel}">
                            <Setter Property="VerticalAlignment" Value="Top"/>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Header="Write URL" Style="{StaticResource WriteURL}">
                        <StackPanel  Background="{StaticResource DarkBackground}" Orientation="Vertical">
                            <StackPanel Margin="10">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Write URI
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    Writes a single Uniform Resource Idenftifier (URI) record to a tag. 
                                    When a person with an NFC-enabled Android device taps a tag written with
                                    a URI, it will attempt to open the resource specified if it has an app installed
                                    that can handle that type of resource. Most commonly this takes the form of a link
                                    to a webpage that is subsequently opened in the user's browser (http:// or https://), but it can
                                    also be one of many other types of URI including email addresses (mailto:), 
                                    telephone numbers (tel:), sms text messagest (sms:), or even custom URIs
                                    unique to certain apps.<LineBreak/><LineBreak/>
                                    Write with Tag Mirror: If "[uid]" is contained in the URL, it will be replaced with the UID of the tag that was tapped when writing.
                                </TextBlock>
                            </StackPanel>
                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Target="{Binding ElementName=urlTextBox}" Content="URL"/>
                            <TextBox Name="urlTextBox" Margin="10,0,20,20" Foreground="White" Background="{StaticResource LightBackground}" BorderBrush="#595959" BorderThickness="0,0,0,1" Text="http://"/>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Name="writeURLButton" HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="WriteURLButton_Click">Write</Button>
                                <Button HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="WriteUrlWithTagMirror_Click">Write with Tag Mirror</Button>
                                <CheckBox Name="repeatUrlWrite" IsChecked="False" VerticalAlignment="Center"/>
                                <TextBlock Foreground="White" Margin="5,0,10,0" VerticalAlignment="Center">Repeat Write</TextBlock>
                            </StackPanel>
                        </StackPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource WriteText}">
                        <StackPanel  Background="{StaticResource DarkBackground}" Orientation="Vertical">
                            <StackPanel Margin="10">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20">
                                    Write Text
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    Write a single UTF-8 encoded text record to a tag.
                                    When tapped by a stock Android device, the user will see
                                    the text contents of this record in a built-in NDEF data
                                    viewing application.
                                </TextBlock>
                            </StackPanel>
                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Target="{Binding ElementName=TextBox}" Content="Text"/>
							<TextBox Name="TextBox" Margin="10,0,20,20" Foreground="White" Background="{StaticResource LightBackground}" BorderBrush="#595959" BorderThickness="0,0,0,1" AcceptsTab="True" AcceptsReturn="True" KeyUp="TextBox_KeyPressed"/>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Name="writeTextButton" Style="{StaticResource RoundButton}" Click="WriteTextButton_Click">Write</Button>
                                <CheckBox Name="repeatTextWrite" IsChecked="False" VerticalAlignment="Center"/>
                                <TextBlock Foreground="White" Margin="5,0,10,0" VerticalAlignment="Center">Repeat Write</TextBlock>
                            </StackPanel>
                        </StackPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource WriteMultiTab}">
                        <DockPanel Background="{StaticResource DarkBackground}">
                            <Grid DockPanel.Dock="Bottom" Background="{x:Null}">
                                <WrapPanel HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Button Name="addTextRowButton" Style="{StaticResource RoundButton}" Click="AddTextRowButton_Click">Add Text</Button>
                                    <Button Name="addUriRowButton" Style="{StaticResource RoundButton}" Click="AddUriRowButton_Click">Add URI</Button>
                                    <Button Style="{StaticResource RoundButton}" Click="ClearButton_Click">Clear</Button>
                                </WrapPanel>
                                <WrapPanel HorizontalAlignment="Right" VerticalAlignment="Center">
                                    <StackPanel Orientation="Horizontal">
                                        <Button Style="{StaticResource RoundButton}" Click="WriteMultNdef">Write</Button>
                                        <CheckBox Name="repeatMultiNdefWrite" IsChecked="False" VerticalAlignment="Center"/>
                                        <TextBlock Foreground="White" Margin="5,0,10,0" VerticalAlignment="Center">Repeat Write</TextBlock>
                                    </StackPanel>
                                </WrapPanel>
                            </Grid>
                            <StackPanel Margin="10" DockPanel.Dock="Top">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Write Multi-record NDEF Message
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    While the other write operations in this application write a message containing
                                    only a single record to the tag, the NFC Data Exchange Format (NDEF) 
                                    puts no limit on the number of records a message can contain. Using this
                                    tool, you may compose a custom NDEF message containing however many text
                                    and URI records you require in whatever order you choose. 
                                    Note that the default Android NDEF tag detection system uses only the first
                                    record to determine what app to dispatch the message to. Therefore, if the first
                                    record on the tag is a URL, the user's browser will open and the rest of the contents
                                    will be ignored.
                                </TextBlock>
                            </StackPanel>
                            <DataGrid ScrollViewer.CanContentScroll="True" ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Auto" Background="{x:Null}" AutoGenerateColumns="False" Name="records" Margin="10" CanUserAddRows="False" Foreground="White">
                                <DataGrid.RowHeaderWidth>0</DataGrid.RowHeaderWidth>
                                <DataGrid.Resources>
                                    <Style TargetType="{x:Type DataGridColumnHeader}">
                                        <Setter Property="Background" Value="{StaticResource AccentHighLightDark}" />
                                    </Style>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="Background" Value="{StaticResource DarkBackground}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.Resources>
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn Header="Type" Width="1*">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <ComboBox ItemsSource="{Binding Options}" SelectedItem="{Binding Selected}"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>

                                    <DataGridTextColumn Header="Content" Binding="{Binding Content}" Width="4*">

                                    </DataGridTextColumn>

                                    <DataGridTemplateColumn Header="Remove" Width="1*">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button Tag="{Binding Index}" Style="{StaticResource RoundButton}" Click="RemoveButton_Click">
                                                    Remove
                                                </Button>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </DockPanel>
                    </TabItem>
                    <TabItem Header="Write VCard" Style="{StaticResource WriteVCardTab}" Visibility="Hidden">
                        <ScrollViewer Background="{StaticResource DarkBackground}">
                            <StackPanel>
                                <GroupBox Header="Personal Information" Foreground="White" Margin="10">
                                    <StackPanel>
                                        <WrapPanel Orientation="Horizontal">
                                            <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Name}"/>
                                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Name"/>
                                        </WrapPanel>
                                        <TextBox Name="nameTextBox" Style="{StaticResource TextBox}"></TextBox>
                                        <WrapPanel Orientation="Horizontal">
                                            <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Email}"/>
                                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Email"/>
                                        </WrapPanel>
                                        <TextBox Name="emailTextBox" Style="{StaticResource TextBox}"></TextBox>
                                        <Grid Background="{x:Null}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                            </Grid.ColumnDefinitions>
                                            <StackPanel Orientation="Vertical" Grid.Column="0">
                                                <WrapPanel Orientation="Horizontal">
                                                    <Image Margin="10,0,0,0" Height="24" Source="{StaticResource SmartPhone}"/>
                                                    <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Cell Phone"/>
                                                </WrapPanel>
                                                <TextBox Name="cellPhoneTextBox" Style="{StaticResource TextBox}"></TextBox>
                                            </StackPanel>
                                            <StackPanel Orientation="Vertical" Grid.Column="1">
                                                <WrapPanel Orientation="Horizontal">
                                                    <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Phone}"/>
                                                    <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Home Phone"/>
                                                </WrapPanel>
                                                <TextBox Name="homePhoneTextBox" Style="{StaticResource TextBox}"></TextBox>
                                            </StackPanel>
                                        </Grid>
                                        <WrapPanel Orientation="Horizontal">
                                            <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Address}"/>
                                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Home Address"/>
                                        </WrapPanel>
                                        <TextBox Name="homeAddrTextBox" Style="{StaticResource TextBox}"></TextBox>
                                        <WrapPanel Orientation="Horizontal">
                                            <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Website}"/>
                                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Website"/>
                                        </WrapPanel>
                                        <TextBox Name="websiteTextBox" Style="{StaticResource TextBox}"></TextBox>
                                    </StackPanel>
                                </GroupBox>
                                <GroupBox Header="Work Information" Foreground="White" Margin="10">
                                    <StackPanel>
                                        <Grid Background="{x:Null}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                            </Grid.ColumnDefinitions>
                                            <StackPanel Orientation="Vertical" Grid.Column="0">
                                                <WrapPanel Orientation="Horizontal">
                                                    <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Company}"/>
                                                    <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Company"/>
                                                </WrapPanel>
                                                <TextBox Name="companyTextBox" Style="{StaticResource TextBox}"></TextBox>
                                            </StackPanel>
                                            <StackPanel Orientation="Vertical" Grid.Column="1">
                                                <WrapPanel Orientation="Horizontal">
                                                    <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Title}"/>
                                                    <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Title"/>
                                                </WrapPanel>
                                                <TextBox Name="titleTextBox" Style="{StaticResource TextBox}"></TextBox>
                                            </StackPanel>
                                        </Grid>

                                        <WrapPanel Orientation="Horizontal">
                                            <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Email}"/>
                                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Business Email"/>
                                        </WrapPanel>
                                        <TextBox Name="businessEmailTextBox" Style="{StaticResource TextBox}"></TextBox>
                                        <WrapPanel Orientation="Horizontal">
                                            <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Phone}"/>
                                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Phone"/>
                                        </WrapPanel>
                                        <TextBox Name="workPhoneTextBox" Style="{StaticResource TextBox}"></TextBox>
                                        <WrapPanel Orientation="Horizontal">
                                            <Image Margin="10,0,0,0" Height="24" Source="{StaticResource Address}"/>
                                            <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Business Address"/>
                                        </WrapPanel>
                                        <TextBox Name="businessAddrTextBox" Style="{StaticResource TextBox}"></TextBox>
                                    </StackPanel>
                                </GroupBox>
                                <Grid Background="{x:Null}">
                                    <Button HorizontalAlignment="Left" Style="{StaticResource RoundButton}" Click="ClearVCardButton_Click">Clear</Button>
                                    <Button HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="WriteVCardButton_Click">Write</Button>
                                </Grid>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Utilities">
                <TabControl Padding="0" TabStripPlacement="Left" Background="{x:Null}" BorderThickness="0">
                    <TabControl.Resources>
                        <Style TargetType="{x:Type Grid}">
                            <Setter Property="Background" Value="White"/>
                        </Style>
                        <Style TargetType="{x:Type TabPanel}">
                            <Setter Property="VerticalAlignment" Value="Top"/>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Style="{StaticResource LockTab}">
                        <StackPanel Background="{StaticResource DarkBackground}">
                            <StackPanel Margin="10" DockPanel.Dock="Top">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Lock Tags
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    This operation instruct the Tappy to lock a tag it encounters until
                                    you either issue a stop command or another instruction. Tag locking is an
                                    irreversible operation that prevents the locked memory from ever being
                                    rewritten, so it is advisable to make certain that any tags you lock
                                    contain the information you desire. For more details on tag locking and 
                                    NFC tag write protection in general, please read the 
                                    <Hyperlink NavigateUri="http://www.taptrack.com/nfc-tag-write-protection/">NFC Tag Write Protection</Hyperlink>
                                    whitepaper. Additionally, once you issue this
                                    command, the Tappy will immediately start locking all tags it encounters,
                                    so make sure there are not any tags you do not want locked in proximity to
                                    the Tappy before initiating batch locking. Some tag technologies will allow
                                    themselves to be 'locked' again when they are already locked, while others
                                    will refuse to undergo locking a second time. Therefore, if you attempt to lock a tag
                                    that is already locked, the Tappy will either report success or failure depending
                                    on the type of tag that was presented.
                                </TextBlock>
                            </StackPanel>
                            <Button HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="LockButton_Click">
                                Lock
                            </Button>
                        </StackPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource LaunchUrl}">
                        <StackPanel Background="{StaticResource DarkBackground}">
                            <StackPanel Margin="10" DockPanel.Dock="Top">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Launch URLs
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    This operation instruct the Tappy to scan for NDEF-formatted tags.
                                    When an NDEF-formatted tag is found, the first record will be checked
                                    to determine if it is an NDEF URL record. If the first record is a URL
                                    record, the utility will then launch the URL in your default browser.
                                    This operation will continue until you stop it, perform another operation,
                                    or a fatal error occurs.
                                </TextBlock>
                            </StackPanel>
                            <Button HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="launchUrlButton_Click">
                                Launch
                            </Button>
                        </StackPanel>
                    </TabItem>
					<TabItem Header="Test" Style="{StaticResource KeyboardWedge}">
						<StackPanel Background="{StaticResource DarkBackground}">
							<StackPanel Margin="10" DockPanel.Dock="Top">
								<TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Keyboard Entry Mode
								</TextBlock>
								<TextBlock Foreground="White" TextWrapping="Wrap">
                                    This utlity will allow the NFC scans to be entered as keyboard characters.  This allows a keyboard wedge functionality.
									The Tappy will scan for NDEF-formatted tags, and any text records will be entered as keyboard entry.  Ideal for spreadsheet applications.                             
								</TextBlock>
								<StackPanel Margin="10">
									<CheckBox Style="{StaticResource SimpleCheckBox}" Name="chbxAddlineBreak" Content="  Add CR, LF after each record" Foreground="White" Margin="2" 
											  Checked="chbxAddlineBreak_Checked" Unchecked="chbxAddlineBreak_Unchecked"/>
									<CheckBox Style="{StaticResource SimpleCheckBox}" Name="chbxAddTab" Content="  Add TAB after each record" Foreground="White" Margin="2" 
											  Checked="chbxAddTab_Checked" Unchecked="chbxAddTab_Unchecked"/>
									<CheckBox Style="{StaticResource SimpleCheckBox}" Name="chbxAddTabLineBreakLast" Content="  Add TAB after each record and CR,LF after final record" Foreground="White" Margin="2" 
											  Checked="chbxAddTabLineBreakLast_Checked" Unchecked="chbxAddTabLineBreakLast_Unchecked"/>
								</StackPanel>
							</StackPanel>
							<Grid Background="{StaticResource DarkBackground}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="1*"/>
									<ColumnDefinition Width="1*"/>
								</Grid.ColumnDefinitions>
								<TextBlock Grid.Column="1" Foreground="White" Text="Activate keyboard wedge mode"/>
								<ToggleButton Grid.Column="1" HorizontalAlignment="Right" Name="tgbtnLaunchKeyboardFeature" 
											  Width="50" Height="30" Margin="0,0,20,0" Style="{StaticResource AnimatedSwitch }" 
											  Checked="tgbtnLaunchKeyboardFeature_Checked" Unchecked="tgbtnLaunchKeyboardFeature_Unchecked"/>
								<!--Checked="tgbtnLaunchKeyboardFeature_Checked"-->
							</Grid>
						</StackPanel>
					</TabItem>
					<TabItem Style="{StaticResource PlatformConfig}">
                        <StackPanel Background="{StaticResource DarkBackground}">
                            <StackPanel Margin="10" DockPanel.Dock="Top">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Configure Tags for TapTrack Platform
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    This operation instruct the Tappy to write the appropriate data
                                    to a tag it encounter in order to enable it to be used with the
                                    TapTrack Platform. Note, you will need to log into your platform account
                                    in your default browser prior to using this tool. This tool also does not
                                    make sure that you performed the second step of associating the tag with your
                                    account, it only write the appropriate data to the tag and launches the 
                                    appropriate URL, so please make sure to complete the association in your browser.
                                </TextBlock>
                            </StackPanel>
                            <Button HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="configureTagForPlatform_Click">
                                Start writing
                            </Button>
                        </StackPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource VersionTab}">
                        <StackPanel Background="{StaticResource DarkBackground}" Orientation="Vertical">
                            <TextBlock Margin="10" Foreground="White">Firmware Version</TextBlock>
                            <TextBox Name="firmwareTextBox" Style="{StaticResource TextBox}"/>
                            <Button Margin="0,0,10,0" Style="{StaticResource RoundButton}" HorizontalAlignment="Right" Click="firmwareVersionButton_Click">Get Firmware Version</Button>
                            <TextBlock Margin="10" Foreground="White">Hardware Version</TextBlock>
                            <TextBox Name="hardwareTextBox" Style="{StaticResource TextBox}"/>
                            <Button Margin="0,0,10,0" Style="{StaticResource RoundButton}" HorizontalAlignment="Right" Click="hardwareVersionButton_Click">Get Hardware Version</Button>
                        </StackPanel>
                    </TabItem>
                    <TabItem Name="batteryTab" Style="{StaticResource BatteryTab}">
                        <StackPanel Background="{StaticResource DarkBackground}">
                            <TextBlock Margin="10" Foreground="White">Battery Level</TextBlock>
                            <TextBox Name="batteryTextBox" Style="{StaticResource TextBox}"/>
                            <Button Margin="0,0,10,0" Style="{StaticResource RoundButton}" HorizontalAlignment="Right" Click="batteryButton_Click">Get Battery Level</Button>
                        </StackPanel>
                    </TabItem>
                    <TabItem Name="configureSettingTab" Style="{StaticResource SettingTab}">
                        <StackPanel Background="{StaticResource DarkBackground}">
                            <StackPanel Margin="10" DockPanel.Dock="Top" Orientation="Vertical">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Configure Tappy Settings
                                </TextBlock>
                                <GroupBox Header="Type 2 Tag identification" Foreground="White">
                                    <StackPanel Orientation="Vertical" Margin="10">
                                        <TextBlock TextWrapping="Wrap">
                                            Enabling this setting causes the detect tag command to find the exact manufacturer and model of a Type 2 Tag
                                        </TextBlock>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                            <Button VerticalAlignment="Center" Style="{StaticResource RoundButton}" Click="enableType2Button_Click">
                                                Enable
                                            </Button>
                                            <Button VerticalAlignment="Center" Style="{StaticResource RoundButton}" Click="disableType2Button_Click">
                                                Disable
                                            </Button>
                                        </StackPanel>
                                    </StackPanel>
                                </GroupBox>
                            </StackPanel>
                        </StackPanel>
                    </TabItem>
                </TabControl>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
